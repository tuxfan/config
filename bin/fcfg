#! /usr/bin/env bash

#------------------------------------------------------------------------------#
# Check required environment variables
#------------------------------------------------------------------------------#

if [ -z "${CMAKE_PREFIX_PATH}" ] ; then
cat << EOF
You must set CMAKE_PREFIX_PATH in your environment before you can use this
tool. Often this error means that you have neglected to load an environment
module or activate a spack environment.
EOF
  exit 1
fi

#------------------------------------------------------------------------------#
# Colors
#------------------------------------------------------------------------------#

WHITE=$'\e[38;5;15m'
GREEN=$'\e[38;5;46m'
RED=$'\e[38;5;160m'
GOLD=$'\e[38;5;228m'
NEUTRAL=$'\e[0m'

#------------------------------------------------------------------------------#
# Help message
#------------------------------------------------------------------------------#

help(){
  command=`echo $0 | sed 's,.*\/,,g'`
cat << EOF

 $WHITE FleCSI Configuration Tool$NEUTRAL

 $WHITE Usage: $GOLD$command$NEUTRAL [flags] [<compiler>] \
[<backend>] [<generator>] [<misc>]

 $WHITE Flags:$NEUTRAL
    $GOLD-h, --help$NEUTRAL     Show this message and exit.
    $GOLD-c, --ccmake$NEUTRAL   Enable curses mode.
    $GOLD-u, --user$NEUTRAL     Enable user mode.
    $GOLD-d, --debug$NEUTRAL    Enable debug mode.

    The$GREEN user$NEUTRAL mode configures FleCSI with defaults \
that are appropriate
    for users of FleCSI, i.e., those who are not core developers.

    The$GREEN debug$NEUTRAL mode configures FleCSI with flags that \
aid in debugging code.

 $WHITE Compiler Options:$NEUTRAL
   $GREEN clang (default)$NEUTRAL
    hip
    gnu
    intel

 $WHITE Backend Options:$NEUTRAL
   $GREEN legion (default)$NEUTRAL
    mpi
    hpx

 $WHITE Generator Options:$NEUTRAL
   $GREEN unix - Unix Makefiles (default)$NEUTRAL
    ninja - Ninja

 $WHITE Miscellaneous Options:$NEUTRAL
    kokkos (enables kokkos, default$WHITE OFF$NEUTRAL)
    hdf5 (enables hdf5, default$WHITE OFF$NEUTRAL)
    openmp (enables openmp$GOLD tasks$NEUTRAL, \
default$WHITE OFF$NEUTRAL)

 $WHITE NOTES:$NEUTRAL
    1) The openmp option is orthogonal to kokkos and allows the use of
       direct openmp pragmas inside of a FleCSI task.

    2) You can automatically set the path to the clang-format executable by
       setting$GOLD CLANG_FORMAT_EXECUTABLE$NEUTRAL in your environment, e.g.:
       $GREEN$ export CLANG_FORMAT_EXECUTABLE=/path/to/clang-format$NEUTRAL

    3) You can automatically set the install path by setting
      $GOLD CONFIG_INSTALL_PREFIX$NEUTRAL in your environment, e.g.:
       $GREEN$ export CONFIG_INSTALL_PREFIX=/path/to/install$NEUTRAL

    4) It may be necessary to completely remove previous build configurations
       for cmake to work. In particular, if you change the compiler, you will
       need to start from a clean build directory.

EOF
}

#------------------------------------------------------------------------------#
# Environment
#------------------------------------------------------------------------------#

CMAKE_INSTALL_PREFIX="${CONFIG_INSTALL_PREFIX:-/usr/local}"
SCRIPT_GENERATOR=" ${CONFIG_SCRIPT_GENERATOR:-Unix Makefiles}"
CLANG_FORMAT=${CLANG_FORMAT_EXECUTABLE:+"-DENABLE_FORMAT=ON -DClangFormat_EXECUTABLE=${CLANG_FORMAT_EXECUTABLE}"}

#------------------------------------------------------------------------------#
# Check command-line arguments
#------------------------------------------------------------------------------#

cmake_mode=cmake
backend=legion
cmake_args=""

WARN="-Wall -Wundef -W -Werror"
SCRIPT_BUILD_TYPE=RelWithDebInfo

# Default is clang
SCRIPT_C_COMPILER=clang
SCRIPT_C_FLAGS="-fcolor-diagnostics -ferror-limit=4 $WARN"
SCRIPT_CXX_COMPILER=clang++
SCRIPT_CXX_FLAGS=$SCRIPT_C_FLAGS

SCRIPT_ENABLE_FLOG="ON"
SCRIPT_FLOG_ENABLE_DEVELOPER_MODE="OFF"
SCRIPT_ENABLE_UNIT_TESTS="ON"
SCRIPT_ENABLE_GRAPHVIZ="ON"
SCRIPT_ENABLE_DOXYGEN="ON"
SCRIPT_ENABLE_SPHINX="ON"
SCRIPT_ENABLE_DOCUMENTATION="ON"
SCRIPT_ENABLE_KOKKOS="OFF"
SCRIPT_ENABLE_HDF5="OFF"
SCRIPT_ENABLE_OPENMP="OFF"

debug=0

while [[ $# -gt 0 ]]
do

	case $1 in
		--help|-h)
      help
			exit
		  ;;
		--ccmake|-c)
			cmake_mode=ccmake
		  ;;
    --user|-u)
      SCRIPT_BUILD_TYPE=Release
      SCRIPT_C_FLAGS="$SCRIPT_C_FLAGS -O2"
      SCRIPT_CXX_FLAGS="$SCRIPT_CXX_FLAGS -O2"
      SCRIPT_ENABLE_FLOG="ON"
      SCRIPT_FLOG_ENABLE_DEVELOPER_MODE="OFF"
      SCRIPT_ENABLE_UNIT_TESTS="OFF"
      SCRIPT_ENABLE_DOXYGEN="OFF"
      SCRIPT_ENABLE_SPHINX="OFF"
      SCRIPT_ENABLE_DOCUMENTATION="OFF"
		  ;;
    --debug|-d)
      debug=1

      # These are for clang (default)
      SCRIPT_C_FLAGS="$SCRIPT_C_FLAGS -O0"
      SCRIPT_CXX_FLAGS="$SCRIPT_CXX_FLAGS -O0"
      SCRIPT_BUILD_TYPE=Debug
      ;;
    ninja)
      SCRIPT_GENERATOR="Ninja"
      ;;
    legion|mpi|hpx)
      backend=$1
      ;;
    clang)
      ;;
    hip)
      SCRIPT_CXX_COMPILER=hipcc
      ;;
    gnu)
      SCRIPT_C_COMPILER=gcc
      SCRIPT_C_FLAGS="-fmax-errors=5 -fdiagnostics-color=always $WARN"
      SCRIPT_CXX_COMPILER=g++
      SCRIPT_CXX_FLAGS=$SCRIPT_C_FLAGS

      if [ $debug -eq 1 ]; then
        SCRIPT_C_FLAGS="$SCRIPT_C_FLAGS -Og -ggdb -gdwarf-5"
        SCRIPT_C_FLAGS="$SCRIPT_CXX_FLAGS -Og -ggdb -gdwarf-5"
      fi
      ;;
    intel)
      SCRIPT_C_COMPILER=icx
      SCRIPT_C_FLAGS="-diag-error-limit=5 $WARN"
      SCRIPT_CXX_COMPILER=icpx
      SCRIPT_CXX_FLAGS=$SCRIPT_C_FLAGS

      if [ $debug -eq 1 ]; then
        SCRIPT_C_FLAGS="$SCRIPT_C_FLAGS -g"
        SCRIPT_C_FLAGS="$SCRIPT_CXX_FLAGS -g"
      fi
      ;;
    oneapi)
      SCRIPT_C_COMPILER=icx
      SCRIPT_C_FLAGS="$WARN"
      SCRIPT_CXX_COMPILER=dpcpp
      SCRIPT_CXX_FLAGS=$SCRIPT_C_FLAGS

      if [ $debug -eq 1 ]; then
        SCRIPT_C_FLAGS="$SCRIPT_C_FLAGS -g"
        SCRIPT_C_FLAGS="$SCRIPT_CXX_FLAGS -g"
      fi
      ;;
    kokkos)
      SCRIPT_ENABLE_KOKKOS="ON"
      ;;
    hdf5)
      SCRIPT_ENABLE_HDF5="ON"
      ;;
    openmp)
      SCRIPT_ENABLE_OPENMP="ON"
      ;;
    -D*)
      cmake_args="$cmake_args $1"
      ;;
    *)
      echo "$RED  Unrecognized option: $1$NEUTRAL"
      help
      exit
      ;;
	esac

	shift # next argument
done

#------------------------------------------------------------------------------#
# Call CMake command
#------------------------------------------------------------------------------#

(set -x; $cmake_mode \
  -G"$SCRIPT_GENERATOR" \
  -DCMAKE_BUILD_TYPE=$SCRIPT_BUILD_TYPE \
  -DCMAKE_C_COMPILER=$SCRIPT_C_COMPILER \
  -DCMAKE_C_FLAGS="$SCRIPT_C_FLAGS" \
  -DCMAKE_CXX_COMPILER=$SCRIPT_CXX_COMPILER \
  -DCMAKE_CXX_FLAGS="$SCRIPT_CXX_FLAGS" \
  -DFLECSI_BACKEND=$backend \
  -DENABLE_FLOG=$SCRIPT_ENABLE_FLOG \
  -DFLOG_ENABLE_DEVELOPER_MODE=$SCRIPT_FLOG_ENABLE_DEVELOPER_MODE \
  -DENABLE_UNIT_TESTS=$SCRIPT_ENABLE_UNIT_TESTS \
  -DENABLE_GRAPHVIZ=$SCRIPT_ENABLE_GRAPHVIZ \
  -DENABLE_DOCUMENTATION=$SCRIPT_ENABLE_DOCUMENTATION \
  -DENABLE_KOKKOS=$SCRIPT_ENABLE_KOKKOS \
  -DENABLE_HDF5=$SCRIPT_ENABLE_HDF5 \
  -DENABLE_OPENMP=$SCRIPT_ENABLE_OPENMP \
  -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
  -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH} \
  ${CLANG_FORMAT} \
  $cmake_args \
  ..
)

#------------------------------------------------------------------------------#
# vim: syntax=sh
#------------------------------------------------------------------------------#
